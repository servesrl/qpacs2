version: '3.6'
services:

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    networks:
      - frontend
    ports:
      - 8080:80
      - 8443:443
    volumes:
#      - sampledata:/sampledata
      - ${NGINX_DEFAULT_CONF:-./nginx/default.conf}:/etc/nginx/conf.d/default.conf
      - ${NGINX_SSL_CERT:-./ssl/ssl_dev.crt}:/etc/ssl/SSL.crt:ro  # SSL development certificate
      - ${NGINX_SSL_KEY:-./ssl/ssl_dev.key}:/etc/ssl/SSL.key:ro   # SSL development key
    depends_on:
      - viewer
    environment:
      - "TZ=Europe/Rome"


  viewer:
    image: ohif/viewer:travis-757
#   image: ohif/viewer:latest
    container_name: viewer
    depends_on:
      - mongo
      - orthanc
    restart: always
    networks:
      - frontend
      - backend
#    ports:
#      - 3000:3000
    links:
      - mongo
    environment:
      - MONGO_URL=${MONGO_URL:-mongodb://mongo:27017/ohif}
      - "TZ=Europe/Rome"
    volumes:
      - ${VIEWER_CONFIG:-./config/viewer.json}:/app/app.json:ro


  mongo:
    image: mongo:latest
    container_name: mongo
    networks:
      - backend
#    ports:
#      - ${MONGO_PORT:-27017}:27017
    volumes:
      - ${MONGO_DATA:-/media/NAS12/qpacs2db/mongo_data}:/data/db
#     - ${MONGO_DATA:-./mongo_data}:/data/db
    environment:
      - "TZ=Europe/Rome"

  orthanc:
    image: jodogne/orthanc-plugins:latest
    container_name: orthanc
    depends_on:
      - postgres
    restart: always
    networks:
      - frontend
      - backend
    ports:
      - ${ORTHANC_DICOM_PORT:-4242}:4242
      - ${ORTHANC_HTTP_PORT:-8042}:8042
     # - 4242:4242
     # - 8042:8042
    volumes:
#      - sampledata:/sampledata
     # - /media/NAS12/qpacs2db:/var/lib/orthanc/db
      - ${ORTHANC_DB:-./orthanc_db}:/var/lib/orthanc/db
      - ${ORTHANC_CONFIG:-./config/orthanc.json}:/etc/orthanc/orthanc.json:ro
    environment:
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-pgpassword}
      - PGDATA=${PGDATA:-/var/lib/postgresql/data}
      - POSTGRES_DB=orthanc
      - "TZ=Europe/Rome"

  postgres:
    image: postgres:11
    container_name: postgres
    networks:
      - backend
#    ports:
#      - ${POSTGRES_PORT:-5432}:5432
    volumes:
      - ${POSTGRES_DATA_MNT:-/pg_data/data}:${PGDATA:-/var/lib/postgresql/data}
#      - ${POSTGRES_DATA_MNT:-/media/NAS12/qpacs2db/pg_data/data}:${PGDATA:-/var/lib/postgresql/data}
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-pgpassword}
      - PGDATA=${PGDATA:-/var/lib/postgresql/data}
      - POSTGRES_DB=orthanc
      - "TZ=Europe/Rome"

  prometheus:
#   image: prom/prometheus:v2.7.0
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ${NGINX_SSL_CERT:-./ssl/ssl_dev.crt}:/etc/ssl/SSL.crt:ro  # SSL development certificate
      - ${NGINX_SSL_KEY:-./ssl/ssl_dev.key}:/etc/ssl/SSL.key:ro   # SSL development key
      - prometheus_data:/prometheus
    environment:
      - "TZ=Europe/Rome"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.external-url=https://localhost:8443/graph'
     # - '--web.route-prefix=/'
#      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
#      - '--web.console.templates=/usr/share/prometheus/consoles'
#    ports:
#      - 9090:9090
#    links:
#      - cadvisor:cadvisor
#      - alertmanager:alertmanager
    depends_on:
      - orthanc
      - nginx
    networks:
      - frontend
      - backend
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./grafana/defaults.ini:/usr/share/grafana/conf/defaults.ini
      - ./grafana/sample.ini:/usr/share/grafana/conf/sample.ini
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    environment:
      - "TZ=Europe/Rome"
    ports:
      - 3320:3320
    depends_on:
      - orthanc
      - nginx
    networks:
      - frontend
      - backend
    restart: always



networks:
  frontend:
  backend:

volumes:
  sampledata:
  prometheus_data:
